### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayLoad {
  """JWT Token"""
  token: String!
}

type CashAccount {
  """
  Name, should user choose it's name differently. Default should be just "Cash"
  """
  accountName: String!

  """The balance of that cash account"""
  balance: String!

  """When this account is created"""
  createdAt: String!

  """The ISO currency of this account"""
  currency: String!

  """base64 image"""
  displayPicture: String

  """id generated automatically by MongoDB"""
  id: String!

  """When this account is last updated"""
  lastUpdate: String!
  userId: String!
}

type CashTransaction {
  """The transaction amount"""
  amount: String!

  """The cash account Id"""
  cashAccountId: String!

  """The category for this transaction"""
  category: [Category]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: String!

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The account id for internal transfer"""
  internalTransferAccountId: String

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant

  """The merchant Id"""
  merchantId: String

  """Additional notes for this transaction"""
  notes: String

  """Additional tags for this transaction"""
  tags: [String]

  """
  The transaction type for this transaction. It's either `INCOME`, `EXPENSE`, or `TRANSFER`
  """
  transactionType: String!
}

type Category {
  amount: String!
  name: String!
}

input CategoryInputType {
  amount: String!
  name: String!
}

type DebitAccount {
  accountNumber: String!

  """The balance of that cash account"""
  balance: String!

  """When this account is created"""
  createdAt: String!

  """The ISO currency of this account"""
  currency: String!

  """id generated automatically by MongoDB"""
  id: String!
  institutionId: String!

  """When this account is last updated"""
  lastUpdate: String!
  userId: String!
}

type DebitTransaction {
  """The transaction amount"""
  amount: String!

  """The category for this transaction"""
  category: [Category]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: String!

  """The debit account Id"""
  debitAccountId: String!

  """The description given by the Banks API"""
  description: String!

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The institution id"""
  institutionId: String!

  """The account id for internal transfer"""
  internalTransferAccountId: String

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """Whether or not this transaction is reviewed by the user on the client"""
  isReviewed: Boolean!

  """Whether or not this transaction is a subscription"""
  isSubscription: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant

  """The merchant Id"""
  merchantId: String

  """Additional notes for this transaction"""
  notes: String

  """Whether or not this transaction is online"""
  onlineTransaction: Boolean!

  """
  The reference id. The reference id is to check on what number is the transaction for the day
  """
  referenceId: String!

  """Additional tags for this transaction"""
  tags: [String]

  """The transaction method. `Virtual Account`, `Debit`"""
  transactionMethod: String!

  """
  The transaction type for this transaction. It's either `INCOME`, `EXPENSE`, or `TRANSFER`
  """
  transactionType: String!
}

enum DirectionTypeEnum {
  IN
  OUT
}

type EMoneyAccount {
  """The balance of that cash account"""
  balance: String!
  cardNumber: String!

  """When this account is created"""
  createdAt: String!

  """The ISO currency of this account"""
  currency: String!

  """id generated automatically by MongoDB"""
  id: String!
  institutionId: String!

  """When this account is last updated"""
  lastUpdate: String!
  userId: String!
}

type EMoneyTransaction {
  """The transaction amount"""
  amount: String!

  """The category for this transaction"""
  category: [Category]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: String!

  """The description given by the Banks API"""
  description: String

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """The E-Wallet account Id"""
  eMoneyAccountId: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The institution id"""
  institutionId: String!

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """Whether or not this transaction is reviewed by the user on the client"""
  isReviewed: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant

  """The merchant Id"""
  merchantId: String

  """Additional notes for this transaction"""
  notes: String

  """Additional tags for this transaction"""
  tags: [String]

  """
  The transaction type for this transaction. It's either `INCOME`, or `EXPENSE`.
  """
  transactionType: String!
}

enum ExpenseTypeEnum {
  EXPENSE
  INCOME
  RECONCILE
  TRANSFER
}

type Location {
  latitude: String!
  longitude: String!
}

input LocationInputType {
  latitude: String!
  longitude: String!
}

type Merchant {
  """The id automatically generated by mongoDB"""
  id: String!

  """The name of the merchant"""
  name: String!

  """The display picture of that merchant"""
  picture: String!

  """The URL of that merchant"""
  url: String!
}

type Mutation {
  """Create a new cash account."""
  addCashAccount(
    """
    The account name of the cash account that user created. Default to "Cash"
    """
    accountName: String! = "Cash"

    """The currency of this account. Use ISO currency"""
    currency: String! = "IDR"

    """The icon or display picture of that account"""
    displayPicture: String

    """The starting balance of the cash account"""
    startingBalance: String! = "0"
  ): CashAccount!

  """Add cash transaction for a particular cash account"""
  addCashTransaction(
    """
    The amount for this transaction. IMPORTANT: only number and commas allowed! E.g.: 50000 for Rp 50.000, or 1002350,89 for Rp 1.002.350,89
    """
    amount: String!

    """The associated id of that cash account id"""
    cashAccountId: String!

    """The category of the transaction"""
    category: [CategoryInputType]!

    """The currency of this transaction, according to ISO 4217"""
    currency: String! = "IDR"

    """The direction for this transaction. `IN` or `OUT`"""
    direction: DirectionTypeEnum!

    """The account id if internal transfer"""
    internalTransferAccountId: String

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean! = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean! = false

    """The location for this transaction"""
    location: LocationInputType

    """The merchant id for this transaction"""
    merchantId: String!

    """Additional notes for this transaction"""
    notes: String

    """The tags for this transaction"""
    tags: [String!]!

    """
    The transaction type. Either INCOME for in transation, EXPENSE for outgoing transaction, and TRANSFER for internal transfer.
    """
    transactionType: ExpenseTypeEnum!
  ): CashTransaction!

  """Update transaction and balance for a particular e-wallet account"""
  addEMoneyTransaction(
    """The amount for that transaction"""
    amount: String!

    """The category of the transaction"""
    category: [CategoryInputType]!

    """The ISO currency"""
    currency: String! = "IDR"

    """Description for the transaction"""
    description: String

    """The associated id of that e-money account id"""
    eMoneyAccountId: String!

    """The institution ID"""
    institutionId: String!

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean! = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean! = false

    """The location for this transaction"""
    location: LocationInputType

    """The merchant ID"""
    merchantId: String!

    """Notes for the transaction"""
    notes: String

    """The tags for this transaction"""
    tags: [String!]!

    """The transaction type. It's either `INCOME` or `EXPENSE`"""
    transactionType: String!
  ): EMoneyTransaction!

  """Add new merchant, if it's not available"""
  addMerchant(
    """The merchant name"""
    name: String!

    """The merchant's display picture"""
    picture: String!

    """The merchant url"""
    url: String!
  ): Merchant!

  """
  Change the user password. Must have JWT Token from running OTP Verification
  """
  changePassword(jwtToken: String!, password: String!): AuthPayLoad!

  """Change the user pin. Must have JWT Token from running OTP Verification"""
  changePin(jwtToken: String!, pin: String!): AuthPayLoad!

  """Connect debit card account via BRICK."""
  connectBcaViaBrick(
    """The BRICK institution Id."""
    brickInstitutionId: Int!

    """The password for the particular bank details"""
    password: String!

    """The username for the particular bank details"""
    username: String!
  ): DebitAccount!

  """Create an E-Money account"""
  createEMoneyAccount(
    """The e-money card number"""
    cardNumber: String!

    """The currency according to ISO standard"""
    currency: String! = "IDR"

    """sessionId after running `sendOtpGopayViaBrick` query"""
    initialBalance: String!

    """The institution ID"""
    institutionId: String!
  ): EMoneyAccount!

  """Delete cash account"""
  deleteCashAccount(
    """The cash account id"""
    id: String!
  ): ResponseMessage

  """Delete a cash transaction"""
  deleteCashTransaction(
    """The id of the transaction"""
    id: String!
  ): ResponseMessage

  """Edit details on user's cash account"""
  editCashAccount(
    """
    The account name of the cash account that user created. Default to "Cash"
    """
    accountName: String = "Cash"

    """The icon or display picture of that account"""
    displayPicture: String

    """The id of that cash account"""
    id: String!
  ): CashAccount!

  """Reconcile cash balance"""
  reconcileCashBalance(
    """The cash account id"""
    cashAccountId: String!

    """The new balance"""
    newBalance: String!
  ): CashAccount!

  """Update transaction and balance for a particular debit account"""
  refreshBcaTransactionViaBrick(
    """The associated id of that debit account id"""
    debitAccountId: String!
  ): [DebitTransaction]

  """
  This is the API where user can sign up after they got invited. This means that the user's data is already in our MongoDB database.
  """
  signup(id: ID!, jwtToken: String!, password: String!, pin: String!, username: String!): AuthPayLoad!

  """Change user's email or whatsapp"""
  updateEmailOrWhatsapp(
    """
    Fill this with the updated email, otherwise fill this with "null"
    """
    email: String

    """Fill this with jwtToken after running otpVerify"""
    jwtToken: String!

    """
    Fill this with the updated whatsapp, otherwise fill this with "null"
    """
    whatsapp: String
  ): User!

  """Change user's public profile"""
  updateProfile(
    """Fill this with the user's public bio"""
    bio: String

    """Fill this with the user's birthday. Format: YYYY-MM-DD"""
    birthday: String

    """
    Fill this with the user's profile picture. Important: Use base64 images.
    """
    profilePicture: String
  ): Profile!

  """
  Change user's info (email, whatsapp, etc.) but not the user public profile
  """
  updateUserFirstAndLastName(
    """
    Fill this with the updated firstName, otherwise fill this with "null"
    """
    firstName: String

    """
    Fill this with the updated lastName, otherwise fill this with "null"
    """
    lastName: String
  ): User!
}

type Profile {
  bio: String
  birthday: String

  """id generated automatically by MongoDB"""
  id: String!
  profilePicture: String
  user: User!

  """userId for that particular user"""
  userId: String!
}

type Query {
  """Get all cash account for a particular user."""
  getAllCashAccount: [CashAccount]

  """Get all the cash transaction from their cashAccountId"""
  getAllCashTransaction(
    """Fill this with cash account id"""
    cashAccountId: String!
  ): [CashTransaction]

  """Get all debit account for a particular user."""
  getAllDebitAccount: [DebitAccount]

  """Get all the debit transaction from their debitAccountId"""
  getAllDebitTransaction(
    """Fill this with debit account id"""
    debitAccountId: String!
  ): [DebitTransaction]

  """Get all e-money account for a particular user."""
  getAllEMoneyAccount: [EMoneyAccount]

  """Get all the e-money transaction from their eMoneyAccountId"""
  getAllEMoneyTransaction(
    """Fill this with e-money account id"""
    eMoneyAccountId: String!
  ): [EMoneyTransaction]

  """This API is to get every merchant's data"""
  getAllMerchant: [Merchant!]!

  """
  This API is to get every user's data in our database. Useful for checking if username is already taken or not.
  """
  getAllUser: [User!]!

  """Get OTP to user email/whatsapp. WhatsApp needs to have "+62" prefix."""
  getOtp(
    """
    Fill this with user email if you want to verify the OTP via the EMAIL OTP, otherwise fill this with "null"
    """
    email: String

    """
    Fill this with user phone number if you want to verify the OTP via the SMS OTP, otherwise fill this with "null"
    """
    whatsapp: String
  ): ResponseMessage

  """Get User's profile from their userId or username"""
  getProfile(
    """
    Fill this with their id, otherwise fill this with "null"
    """
    userId: String

    """
    Fill this with username, otherwise fill this with "null"
    """
    username: String
  ): Profile

  """Get the User's frequent refresh behaviour"""
  getRefresh(
    """
    Fill this with their id, otherwise fill this with "null"
    """
    userId: String

    """
    Fill this with username, otherwise fill this with "null"
    """
    username: String
  ): [Refresh]

  """Get User's info from their Username"""
  getUser(
    """
    Fill this with username, otherwise fill this with "null"
    """
    username: String!
  ): User
  login(password: String!, username: String!): AuthPayLoad!

  """
  Get JWT Token from email/whatsapp OTP that has been requested from the client. We then verified the OTP in this server. WhatsApp needs to have "+62" prefix.
  """
  verifyOtp(
    """
    Fill this with user email if you want to verify the OTP via the EMAIL OTP, otherwise fill this with "null"
    """
    email: String
    otp: String!

    """
    Fill this with user phone number if you want to verify the OTP via the SMS OTP, otherwise fill this with "null"
    """
    whatsapp: String
  ): AuthPayLoad!

  """Get JWT Token from user's PIN."""
  verifyPin(pin: String!, username: String!): AuthPayLoad!
}

type Refresh {
  date: String!
  id: String!
  user: User!
  userId: String!
}

type ResponseMessage {
  """Response message"""
  response: String
}

type User {
  createdAt: String!
  email: String!
  firstName: String!

  """id generated automatically by MongoDB"""
  id: String!

  """This is the kudos No."""
  kudosNo: Int!
  lastName: String!
  username: String!
  whatsapp: String!
}