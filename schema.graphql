### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayLoad {
  """JWT Token"""
  token: String!
}

enum BudgetTypeEnum {
  CUSTOM
  MONTHLY
}

type Budgeting {
  """The amount of this budgeting"""
  amount: String!

  """The name of this budgeting"""
  budgetName: String!

  """Budget type of this budgeting"""
  budgetTypeId: BudgetTypeEnum!

  """When this budgeting is created"""
  createdAt: DateTime!

  """id generated automatically by MongoDB"""
  id: String!

  """When this budgeting is last updated"""
  lastUpdate: DateTime!
  userId: String!
}

type CashAccount {
  """
  Name, should user choose it's name differently. Default should be just "Cash"
  """
  accountName: String!

  """The balance of that cash account"""
  balance: String!

  """When this account is created"""
  createdAt: DateTime!

  """The ISO currency of this account"""
  currency: String!

  """base64 image"""
  displayPicture: String

  """id generated automatically by MongoDB"""
  id: String!

  """When this account is last updated"""
  lastUpdate: DateTime!
  userId: String!
}

type CashTransaction {
  """The transaction amount"""
  amount: String!

  """The cash account Id"""
  cashAccountId: String!

  """The category for this transaction"""
  category: [NameAmountJson!]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: DateTime!

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The tranaction id for internal transfer"""
  internalTransferTransactionId: String

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant!

  """The merchant Id"""
  merchantId: String!

  """Additional notes for this transaction"""
  notes: String

  """Additional tags for this transaction"""
  tags: [NameAmountJson!]

  """The display name of the transaction"""
  transactionName: String!

  """
  The transaction type for this transaction. It's either `INCOME`, `EXPENSE`, `TRANSFER`, or `RECONCILE`
  """
  transactionType: String!
}

type CashTransactionSubscriptionType {
  """The type of mutationType. Either `ADD` `EDIT` or `DELETE`"""
  mutationType: typeOfMutationType!
  transaction: CashTransaction!
}

type CategoryPlan {
  """The amount of this planning category"""
  amount: String!

  """Budget id of this planning category"""
  budgetId: String!

  """Category id of this planning category"""
  categoryId: String!

  """When this budgeting is created"""
  createdAt: DateTime!

  """id generated automatically by MongoDB"""
  id: String!

  """When this budgeting is last updated"""
  lastUpdate: DateTime!

  """Is this planning category is same for all month or not ?"""
  monthly: Boolean!

  """Tag id of this planning category"""
  tagId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-time format.
"""
scalar DateTime

type DebitAccount {
  accountNumber: String!

  """The balance of that cash account"""
  balance: String!

  """The brick access token"""
  brickAccessToken: String

  """Brick institution ID."""
  brickInstitutionId: Int

  """When this account is created"""
  createdAt: DateTime!

  """The ISO currency of this account"""
  currency: String!

  """Wether or not this debit account access token is expired"""
  expired: Boolean!

  """id generated automatically by MongoDB"""
  id: String!
  institutionId: String!

  """When this account is last updated"""
  lastUpdate: DateTime!
  userId: String!
}

type DebitTransaction {
  """The transaction amount"""
  amount: String!

  """The category for this transaction"""
  category: [NameAmountJson!]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: DateTime!

  """The debit account Id"""
  debitAccountId: String!

  """The description given by the Banks API"""
  description: String!

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The institution id"""
  institutionId: String!

  """The transaction id for internal transfer"""
  internalTransferTransactionId: String

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """Whether or not this transaction is reviewed by the user on the client"""
  isReviewed: Boolean!

  """Whether or not this transaction is a subscription"""
  isSubscription: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant!

  """The merchant Id"""
  merchantId: String!

  """Additional notes for this transaction"""
  notes: String

  """Whether or not this transaction is online"""
  onlineTransaction: Boolean!

  """
  The reference id. The reference id is to check on what number is the transaction for the day
  """
  referenceId: String!

  """Additional tags for this transaction"""
  tags: [NameAmountJson!]

  """The transaction method. `Virtual Account`, `Debit`"""
  transactionMethod: String!

  """The transaction display name"""
  transactionName: String!

  """
  The transaction type for this transaction. It's either `INCOME`, `EXPENSE`, or `TRANSFER`
  """
  transactionType: String!
}

type DebitTransactionSubscriptionType {
  """The type of mutationType. Either `ADD` `EDIT` or `DELETE`"""
  mutationType: typeOfMutationType!
  transaction: DebitTransaction!
}

enum DirectionTypeEnum {
  IN
  OUT
}

type EMoneyAccount {
  """The balance of that cash account"""
  balance: String!
  cardNumber: String!

  """When this account is created"""
  createdAt: DateTime!

  """The ISO currency of this account"""
  currency: String!

  """id generated automatically by MongoDB"""
  id: String!
  institutionId: String!

  """When this account is last updated"""
  lastUpdate: DateTime!
  userId: String!
}

type EMoneyTransaction {
  """The transaction amount"""
  amount: String!

  """The category for this transaction"""
  category: [NameAmountJson!]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: DateTime!

  """The description given by the Banks API"""
  description: String

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """The E-Wallet account Id"""
  eMoneyAccountId: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The institution id"""
  institutionId: String!

  """The transaction id for internal transfer"""
  internalTransferTransactionId: String

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """Whether or not this transaction is reviewed by the user on the client"""
  isReviewed: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant!

  """The merchant Id"""
  merchantId: String!

  """Additional notes for this transaction"""
  notes: String

  """Additional tags for this transaction"""
  tags: [NameAmountJson!]

  """The transaction display name"""
  transactionName: String!

  """
  The transaction type for this transaction. It's either `INCOME`, `EXPENSE`, or `TRANSFER`.
  """
  transactionType: String!
}

type EMoneyTransactionSubscriptionType {
  """The type of mutationType. Either `ADD` `EDIT` or `DELETE`"""
  mutationType: typeOfMutationType!
  transaction: EMoneyTransaction!
}

type EWalletAccount {
  accountNumber: String!

  """The balance of that cash account"""
  balance: String!

  """The brick access token"""
  brickAccessToken: String

  """Brick institution ID."""
  brickInstitutionId: Int

  """When this account is created"""
  createdAt: DateTime!

  """The ISO currency of this account"""
  currency: String!

  """Wether or not this e-wallet account access token is expired"""
  expired: Boolean!

  """id generated automatically by MongoDB"""
  id: String!
  institutionId: String!

  """When this account is last updated"""
  lastUpdate: DateTime!
  userId: String!
}

type EWalletTransaction {
  """The transaction amount"""
  amount: String!

  """The category for this transaction"""
  category: [NameAmountJson!]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: DateTime!

  """The description given by the Banks API"""
  description: String!

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """The E-Wallet account Id"""
  eWalletAccountId: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The institution id"""
  institutionId: String!

  """The transaction id for internal transfer"""
  internalTransferTransactionId: String

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """Whether or not this transaction is reviewed by the user on the client"""
  isReviewed: Boolean!

  """Whether or not this transaction is a subscription"""
  isSubscription: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant!

  """The merchant Id"""
  merchantId: String!

  """Additional notes for this transaction"""
  notes: String

  """Whether or not this transaction is online"""
  onlineTransaction: Boolean!

  """
  The reference id. The reference id is to check on what number is the transaction for the day
  """
  referenceId: String!

  """Additional tags for this transaction"""
  tags: [NameAmountJson]

  """The transaction display name"""
  transactionName: String!

  """
  The transaction type for this transaction. It's either `INCOME`, `EXPENSE`, or `TRANSFER`
  """
  transactionType: String!
}

type EWalletTransactionSubscriptionType {
  """The type of mutationType. Either `ADD` `EDIT` or `DELETE`"""
  mutationType: typeOfMutationType!
  transaction: EWalletTransaction!
}

enum ExpenseTypeEnum {
  EXPENSE
  INCOME
}

type GopayEWalletAndPayLaterAccount {
  EWallet: EWalletAccount!
  PayLater: PayLaterAccount!
}

type GopayEWalletAndPayLaterTransaction {
  EWallet: [EWalletTransaction]!
  PayLater: [PayLaterTransaction]!
}

input KudokuxBrickAccount {
  accessToken: String!
  accountHolder: String!
  accountId: String!
  accountNumber: String!
  balances: KudokuxBrickBalance!
  currency: String!
  institutionId: Int!
  type: String
}

input KudokuxBrickBalance {
  available: Float!
  current: Float!
  limit: Float
}

input KudokuxBrickTransaction {
  account_currency: String!
  account_id: String!
  account_number: String!
  amount: Float!
  category: KudokuxBrickTransactionCategory
  date: String!
  dateTimestamp: String!
  description: String!
  direction: String!
  id: Int!
  institution_id: Int!
  location_city_id: Int!
  location_country_id: Int!
  merchant_id: Int!
  outlet_outlet_id: Int!
  reference_id: String!
  status: String!
  transaction_type: String
}

input KudokuxBrickTransactionCategory {
  category_id: Int
  category_name: String
  classification_group: String
  classification_group_id: Int
  classification_subgroup: String
  classification_subgroup_id: Int
}

type Location {
  latitude: String!
  longitude: String!
}

input LocationInputType {
  latitude: String!
  longitude: String!
}

type Merchant {
  """The id automatically generated by mongoDB"""
  id: String!

  """The name of the merchant"""
  name: String!

  """The display picture of that merchant"""
  picture: String!

  """The URL of that merchant"""
  url: String!
}

enum Month {
  Agustus
  April
  Desember
  Februari
  Januari
  Juli
  Juni
  Maret
  Mei
  November
  Oktober
  September
}

type Mutation {
  """
  A form of pushing debit account database using data that has been received by running KudokuxBrick.
  """
  addBcaViaKudokuxBrick(
    """The account from KudokuxBrick"""
    account: KudokuxBrickAccount!

    """The transaction from KudokuxBrick"""
    transaction: [KudokuxBrickTransaction!]
  ): DebitAccount!

  """Create a new budgeting."""
  addBudgeting(
    """The amount of the budget"""
    amount: String!

    """The name of the budget"""
    budgetName: String!

    """The budget type of this budgeting"""
    budgetTypeId: BudgetTypeEnum!
  ): Budgeting!

  """Create a new cash account."""
  addCashAccount(
    """
    The account name of the cash account that user created. Default to "Cash"
    """
    accountName: String! = "Cash"

    """The currency of this account. Use ISO currency"""
    currency: String! = "IDR"

    """The icon or display picture of that account"""
    displayPicture: String

    """The starting balance of the cash account"""
    startingBalance: String! = "0"
  ): CashAccount!

  """Add cash transaction for a particular cash account"""
  addCashTransaction(
    """
    The amount for this transaction. IMPORTANT: only number and commas allowed! E.g.: 50000 for Rp 50.000, or 1002350,89 for Rp 1.002.350,89
    """
    amount: String!

    """The associated id of that cash account id"""
    cashAccountId: String!

    """The category of the transaction"""
    category: [NameAmountJsonInput]!

    """The currency of this transaction, according to ISO 4217"""
    currency: String! = "IDR"

    """The direction for this transaction. `IN` or `OUT`"""
    direction: DirectionTypeEnum!

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean! = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean! = false

    """The location for this transaction"""
    location: LocationInputType

    """The merchant id for this transaction"""
    merchantId: String!

    """Additional notes for this transaction"""
    notes: String

    """The tags for this transaction"""
    tags: [NameAmountJsonInput]

    """Transaction name"""
    transactionName: String!

    """
    The transaction type. Either INCOME for in transation, EXPENSE for outgoing transaction, and TRANSFER for internal transfer.
    """
    transactionType: ExpenseTypeEnum!
  ): CashTransaction!

  """Create a new planning category."""
  addCategoryPlan(
    """The amount of the budget"""
    amount: String!

    """Budget id of this planning category"""
    budgetId: String!

    """Category id of this planning category"""
    categoryId: String!

    """Is this planning category is same for all month or not ?"""
    monthly: Boolean!

    """Tag id of this planning category"""
    tagId: String!
  ): CategoryPlan!

  """Add transaction and balance for a particular e-money account"""
  addEMoneyTransaction(
    """The amount for that transaction"""
    amount: String!

    """The category of the transaction"""
    category: [NameAmountJsonInput]!

    """The ISO currency"""
    currency: String! = "IDR"

    """Description for the transaction"""
    description: String

    """The direction for this transaction. `IN` or `OUT`"""
    direction: DirectionTypeEnum!

    """The associated id of that e-money account id"""
    eMoneyAccountId: String!

    """The institution ID"""
    institutionId: String!

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean! = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean! = false

    """The location for this transaction"""
    location: LocationInputType

    """The merchant ID"""
    merchantId: String!

    """Notes for the transaction"""
    notes: String

    """The tags for this transaction"""
    tags: [NameAmountJsonInput]

    """The transaction name"""
    transactionName: String!

    """The transaction type. It's either `INCOME`, `EXPENSE`, or `TRANSFER`"""
    transactionType: String!
  ): EMoneyTransaction!

  """Add new merchant, if it's not available"""
  addMerchant(
    """The merchant name"""
    name: String!

    """The merchant's display picture"""
    picture: String!

    """The merchant url"""
    url: String!
  ): Merchant!

  """
  Change the user password. Must have JWT Token from running OTP Verification
  """
  changePassword(jwtToken: String!, password: String!): AuthPayLoad!

  """Change the user pin. Must have JWT Token from running OTP Verification"""
  changePin(jwtToken: String!, pin: String!): AuthPayLoad!

  """Connect debit card account via BRICK."""
  connectBcaViaBrick(
    """The BRICK institution Id."""
    brickInstitutionId: Int!

    """The password for the particular bank details"""
    password: String!

    """The username for the particular bank details"""
    username: String!
  ): DebitAccount! @deprecated(reason: "Please do not use this anymore as a form of connecting via the web app. Unless you do this via localhost.")

  """Connect Gopay paylater after running KudokuxBrick API."""
  connectGopayPayLaterViaKudokuxBrick(
    """The account after running KudokuxBrick API."""
    account: KudokuxBrickAccount!

    """The transaction after running KudokuxBrick API."""
    transaction: [KudokuxBrickTransaction!]
  ): PayLaterAccount!

  """Connect Gopay account via BRICK."""
  connectGopayViaBrick(
    """clientId after running `sendOtpGopayViaBrick` query"""
    clientId: Int!

    """otp after running `sendOtpGopayViaBrick` query"""
    otp: String!

    """otpToken after running `sendOtpGopayViaBrick` query"""
    otpToken: String!

    """redirectRefId after running `sendOtpGopayViaBrick` query"""
    redirectRefId: Int!

    """sessionId after running `sendOtpGopayViaBrick` query"""
    sessionId: String!

    """uniqueId after running `sendOtpGopayViaBrick` query"""
    uniqueId: String!

    """Nomor HP Gopay"""
    username: String!
  ): GopayEWalletAndPayLaterAccount! @deprecated(reason: "Deprecated! Please use connectGopayViaKudokuxBrick instead. Can still use this mutation if running on local!")

  """Connect Gopay wallet after running KudokuxBrick API."""
  connectGopayWalletViaKudokuxBrick(
    """The account after running KudokuxBrick API."""
    account: KudokuxBrickAccount!

    """The transaction after running KudokuxBrick API."""
    transaction: [KudokuxBrickTransaction!]
  ): EWalletAccount!

  """Create an E-Money account"""
  createEMoneyAccount(
    """The e-money card number"""
    cardNumber: String!

    """The currency according to ISO standard"""
    currency: String! = "IDR"

    """The initial balance for that e-money"""
    initialBalance: String!

    """The institution ID"""
    institutionId: String!
  ): EMoneyAccount!

  """Delete budgeting."""
  deleteBudgeting(
    """The id of that budgeting"""
    budgetingId: String!
  ): ResponseMessage

  """Delete cash account"""
  deleteCashAccount(
    """The cash account id"""
    cashAccountId: String!
  ): ResponseMessage

  """Delete a cash transaction"""
  deleteCashTransaction(
    """The id of the transaction"""
    transactionId: String!
  ): ResponseMessage

  """Delete Category Plan."""
  deleteCategoryPlan(
    """The id of that category plan"""
    categoryPlanId: String!
  ): ResponseMessage

  """Delete debit account"""
  deleteDebitAccount(
    """The debit account id"""
    debitAccountId: String!
  ): ResponseMessage

  """Delete e-money account"""
  deleteEMoneyAccount(
    """The e-money account id"""
    eMoneyAccountId: String!
  ): ResponseMessage

  """Delete a particular e-money transaction"""
  deleteEMoneyTransaction(
    """The associated id of that e-money transaction id"""
    transactionId: String!
  ): ResponseMessage!

  """
  Delete e-wallet account. Specifically, delete gopay account. Because gopay has two type, ewallet and paylater account
  """
  deleteGopayAccount(
    """The e-wallet account id"""
    eWalletAccountId: String!
  ): ResponseMessage

  """Edit budgeting."""
  editBudgeting(
    """The amount of the budget"""
    amount: String!

    """The name of the budget"""
    budgetName: String!

    """The budget type of this budgeting"""
    budgetTypeId: BudgetTypeEnum!

    """The id of that budgeting"""
    budgetingId: String!
  ): Budgeting!

  """Edit details on user's cash account"""
  editCashAccount(
    """
    The account name of the cash account that user created. Default to "Cash"
    """
    accountName: String = "Cash"

    """The id of that cash account"""
    cashAccountId: String!

    """The icon or display picture of that account"""
    displayPicture: String
  ): CashAccount!

  """Edit a cash transaction"""
  editCashTransaction(
    """The category of the transaction"""
    category: [NameAmountJsonInput]

    """The currency of this transaction, according to ISO 4217"""
    currency: String = "IDR"

    """The direction for this transaction. `IN` or `OUT`"""
    direction: DirectionTypeEnum

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean = false

    """The location for this transaction"""
    location: LocationInputType

    """The merchant id for this transaction"""
    merchantId: String

    """Additional notes for this transaction"""
    notes: String

    """The tags for this transaction"""
    tags: [NameAmountJsonInput]

    """The id of the transaction"""
    transactionId: String!

    """Transaction name"""
    transactionName: String

    """
    The transaction type. Either INCOME for in transation, EXPENSE for outgoing transaction, and TRANSFER for internal transfer.
    """
    transactionType: ExpenseTypeEnum
  ): CashTransaction!

  """Edit Planning Category."""
  editCategoryPlan(
    """The amount of the category plan"""
    amount: String!

    """Category id of this planning category"""
    categoryId: String!

    """The amount of this category plan"""
    categoryPlanId: String!

    """Is this planning category is same for all month or not ?"""
    monthly: Boolean!

    """Tag id of this planning category"""
    tagId: String!
  ): CategoryPlan!

  """Edit a particular debit transaction"""
  editDebitTransaction(
    """The category of the transaction"""
    category: [NameAmountJsonInput]

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean! = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean! = false

    """Wether or not this transaction is a subscription"""
    isSubscription: Boolean

    """The location for this transaction"""
    location: LocationInputType

    """The merchant id"""
    merchantId: String

    """Notes for this transaction"""
    notes: String

    """Wether or not this transaction is online"""
    onlineTransaction: Boolean

    """The tags for this transaction"""
    tags: [NameAmountJsonInput]

    """The associated id of that transaction"""
    transactionId: String!

    """What transaction method is this."""
    transactionMethod: TransactionMethodEnum

    """The transaction name"""
    transactionName: String

    """
    The transaction type. Either INCOME for in transation, EXPENSE for outgoing transaction, and TRANSFER for internal transfer.
    """
    transactionType: ExpenseTypeEnum
  ): DebitTransaction!

  """Edit a particular e-money transaction and update it's balance"""
  editEMoneyTransaction(
    """The category of the transaction"""
    category: [NameAmountJsonInput]

    """The direction for this transaction. `IN` or `OUT`"""
    direction: DirectionTypeEnum

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean = false

    """The location for this transaction"""
    location: LocationInputType

    """The merchant ID"""
    merchantId: String

    """Notes for the transaction"""
    notes: String

    """The tags for this transaction"""
    tags: [NameAmountJsonInput]

    """The associated id of that e-money transaction id"""
    transactionId: String!

    """The transaction name"""
    transactionName: String

    """
    The transaction type. Either INCOME for in transation, and EXPENSE for outgoing transaction
    """
    transactionType: ExpenseTypeEnum
  ): EMoneyTransaction!

  """Edit a particular e-wallet transaction"""
  editEWalletTransaction(
    """The category of the transaction"""
    category: [NameAmountJsonInput]

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean! = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean! = false

    """Wether or not this transaction is a subscription"""
    isSubscription: Boolean

    """The location for this transaction"""
    location: LocationInputType

    """The merchant id"""
    merchantId: String

    """Notes for this transaction"""
    notes: String

    """Wether or not this transaction is online"""
    onlineTransaction: Boolean

    """The tags for this transaction"""
    tags: [NameAmountJsonInput]

    """The associated id of that transaction"""
    transactionId: String!

    """The transaction name"""
    transactionName: String

    """
    The transaction type. Either INCOME for in transation, EXPENSE for outgoing transaction.
    """
    transactionType: ExpenseTypeEnum
  ): EWalletTransaction!

  """Edit a particular pay later transaction"""
  editPayLaterTransaction(
    """The category of the transaction"""
    category: [NameAmountJsonInput]

    """Whether or not this transaction is hide from budget. default: false"""
    isHideFromBudget: Boolean! = false

    """Whether or not this transaction is hide from insight. default: false"""
    isHideFromInsight: Boolean! = false

    """Wether or not this transaction is a subscription"""
    isSubscription: Boolean

    """The location for this transaction"""
    location: LocationInputType

    """The merchant id"""
    merchantId: String

    """Notes for this transaction"""
    notes: String

    """Wether or not this transaction is online"""
    onlineTransaction: Boolean

    """The tags for this transaction"""
    tags: [NameAmountJsonInput]

    """The associated id of that transaction"""
    transactionId: String!

    """The transaction name"""
    transactionName: String

    """
    The transaction type. Either INCOME for in transation, EXPENSE for outgoing transaction.
    """
    transactionType: ExpenseTypeEnum
  ): PayLaterTransaction!

  """Reconcile cash balance"""
  reconcileCashBalance(
    """The cash account id"""
    cashAccountId: String!

    """The new balance"""
    newBalance: String!
  ): CashAccount!

  """Reconcile e-money balance"""
  reconcileEMoneyAccount(
    """The cash account id"""
    eMoneyAccountId: String!

    """The new balance"""
    newBalance: String!
  ): EMoneyAccount!

  """Update transaction and balance for a particular debit account"""
  refreshBcaTransactionViaBrick(
    """The associated id of that debit account id"""
    debitAccountId: String!
  ): [DebitTransaction] @deprecated(reason: "Please do not use this anymore as a form of refreshing transaction via the web app. Unless you do this via localhost.")

  """
  A form of refreshing debit account database using data that has been received by running KudokuxBrick.
  """
  refreshBcaViaKudokuxBrick(
    """The account from KudokuxBrick"""
    account: KudokuxBrickAccount!

    """The debit account id."""
    debitAccountId: String!

    """The transaction from KudokuxBrick"""
    transaction: [KudokuxBrickTransaction!]!

    """
    The transaction reference Id after running query `getDebitLatestTransaction`
    """
    transactionReferenceId: String!
  ): DebitTransaction

  """
  A form of refreshing pay later account database using data that has been received by running KudokuxBrick.
  """
  refreshGopayPayLaterViaKudokuxBrick(
    """The account from KudokuxBrick"""
    account: KudokuxBrickAccount!

    """The pay later account id."""
    payLaterAccountId: String!

    """The transaction from KudokuxBrick"""
    transaction: [KudokuxBrickTransaction!]!

    """
    The transaction reference Id after running query `getPayLaterLatestTransaction`
    """
    transactionReferenceId: String!
  ): PayLaterTransaction

  """Update transaction and balance for gopay account"""
  refreshGopayTransactionViaBrick(
    """The associated id of that e-wallet account id"""
    eWalletAccountId: String

    """The associated id of that paylater account id"""
    payLaterAccountId: String
  ): GopayEWalletAndPayLaterTransaction @deprecated(reason: "Deprecated! Please only use this on dev.")

  """
  A form of refreshing ewallet account database using data that has been received by running KudokuxBrick.
  """
  refreshGopayWalletViaKudokuxBrick(
    """The account from KudokuxBrick"""
    account: KudokuxBrickAccount!

    """The e-wallet account id."""
    eWalletAccountId: String!

    """The transaction from KudokuxBrick"""
    transaction: [KudokuxBrickTransaction!]!

    """
    The transaction reference Id after running query `getPayLaterLatestTransaction`
    """
    transactionReferenceId: String!
  ): EWalletTransaction

  """
  This is the API where user can sign up after they got invited. This means that the user's data is already in our MongoDB database.
  """
  signup(id: ID!, jwtToken: String!, password: String!, pin: String!, username: String!): AuthPayLoad!

  """Update debit account expired property."""
  updateDebitAccountExpiry(
    """The debitAccountId"""
    debitAccountId: String!

    """If expired `true` if not `false`"""
    expired: Boolean!
  ): ResponseMessage

  """Update e-wallet account expired property."""
  updateEWalletAccountExpiry(
    """The eWalletAccountId"""
    eWalletAccountId: String!

    """If expired `true` if not `false`"""
    expired: Boolean!
  ): ResponseMessage

  """Change user's email or whatsapp"""
  updateEmailOrWhatsapp(
    """
    Fill this with the updated email, otherwise fill this with "null"
    """
    email: String

    """Fill this with jwtToken after running otpVerify"""
    jwtToken: String!

    """
    Fill this with the updated whatsapp, otherwise fill this with "null"
    """
    whatsapp: String
  ): User!

  """Update pay later account expired property."""
  updatePayLaterAccountExpiry(
    """If expired `true` if not `false`"""
    expired: Boolean!

    """The payLaterAccountId"""
    payLaterAccountId: String!
  ): ResponseMessage

  """Change user's public profile"""
  updateProfile(
    """Fill this with the user's public bio"""
    bio: String

    """Fill this with the user's birthday. Format: YYYY-MM-DD"""
    birthday: String

    """
    Fill this with the user's profile picture. Important: Use base64 images.
    """
    profilePicture: String
  ): Profile!

  """
  Change user's info (email, whatsapp, etc.) but not the user public profile
  """
  updateUserFirstAndLastName(
    """
    Fill this with the updated firstName, otherwise fill this with "null"
    """
    firstName: String

    """
    Fill this with the updated lastName, otherwise fill this with "null"
    """
    lastName: String
  ): User!
}

type NameAmountJson {
  amount: String!
  name: String!
}

input NameAmountJsonInput {
  amount: String!
  name: String!
}

type OTPData {
  clientId: Int!
  otpToken: String!
  redirectRefId: Int!
  sessionId: String!
  uniqueId: String!
  username: String!
}

type PayLaterAccount {
  accountNumber: String!

  """The balance of that pay later account"""
  balance: String!

  """The brick access token"""
  brickAccessToken: String

  """Brick institution ID."""
  brickInstitutionId: Int

  """When this account is created"""
  createdAt: DateTime!

  """The ISO currency of this account"""
  currency: String!

  """Wether or not this pay later account access token is expired"""
  expired: Boolean!

  """id generated automatically by MongoDB"""
  id: String!
  institutionId: String!

  """When this account is last updated"""
  lastUpdate: DateTime!

  """The limit of that pay later account"""
  limit: String!
  userId: String!
}

type PayLaterTransaction {
  """The transaction amount"""
  amount: String!

  """The category for this transaction"""
  category: [NameAmountJson!]

  """ISO 4217 Currency"""
  currency: String!

  """Date and Timestamp for this transaction"""
  dateTimestamp: DateTime!

  """The description given by the Banks API"""
  description: String!

  """The direction of the transaction. It's either `IN`, or `OUT`"""
  direction: String!

  """id generated automatically by MongoDB"""
  id: String!

  """The institution id"""
  institutionId: String!

  """The transaction id for internal transfer"""
  internalTransferTransactionId: String

  """Whether or not this transaction is hidden from budget"""
  isHideFromBudget: Boolean!

  """Whether or not this transaction is hidden from insight"""
  isHideFromInsight: Boolean!

  """Whether or not this transaction is reviewed by the user on the client"""
  isReviewed: Boolean!

  """Whether or not this transaction is a subscription"""
  isSubscription: Boolean!

  """The location of the transaction"""
  location: Location

  """The merchant"""
  merchant: Merchant!

  """The merchant Id"""
  merchantId: String!

  """Additional notes for this transaction"""
  notes: String

  """Whether or not this transaction is online"""
  onlineTransaction: Boolean!

  """The pay later account Id"""
  payLaterAccountId: String!

  """
  The reference id. The reference id is to check on what number is the transaction for the day
  """
  referenceId: String!

  """Additional tags for this transaction"""
  tags: [NameAmountJson]

  """The transaction display name"""
  transactionName: String!

  """
  The transaction type for this transaction. It's either `INCOME`, `EXPENSE`, or `TRANSFER`
  """
  transactionType: String!
}

type PayLaterTransactionSubscriptionType {
  """The type of mutationType. Either `ADD` `EDIT` or `DELETE`"""
  mutationType: typeOfMutationType!
  transaction: PayLaterTransaction!
}

type Profile {
  bio: String
  birthday: String

  """id generated automatically by MongoDB"""
  id: String!
  profilePicture: String
  user: User!

  """userId for that particular user"""
  userId: String!
}

type Query {
  """Get all budgeting for a particular user."""
  getAllBudgeting: [Budgeting]

  """Get all cash account for a particular user."""
  getAllCashAccount: [CashAccount]

  """Get all the cash transaction from their cashAccountId"""
  getAllCashTransaction(
    """Fill this with cash account id"""
    cashAccountId: String!
  ): [CashTransaction]

  """Get all CategoryPlan for a particular user"""
  getAllCategoryPlan(
    """Fill this with budget id"""
    budgetId: String!
  ): [CategoryPlan]

  """Get all debit account for a particular user."""
  getAllDebitAccount: [DebitAccount]

  """Get all the debit transaction from their debitAccountId"""
  getAllDebitTransaction(
    """Fill this with debit account id"""
    debitAccountId: String!
  ): [DebitTransaction]

  """Get all e-money account for a particular user."""
  getAllEMoneyAccount: [EMoneyAccount]

  """Get all the e-money transaction from their eMoneyAccountId"""
  getAllEMoneyTransaction(
    """Fill this with e-money account id"""
    eMoneyAccountId: String!
  ): [EMoneyTransaction]

  """Get all e-wallet account for a particular user."""
  getAllEWalletAccount: [EWalletAccount]

  """Get all the e-wallet transaction from their eWalletAccountId"""
  getAllEWalletTransaction(
    """Fill this with e-wallet account id"""
    eWalletAccountId: String!
  ): [EWalletTransaction]

  """This API is to get every merchant's data"""
  getAllMerchant: [Merchant!]!

  """Get all pay later account for a particular user."""
  getAllPayLaterAccount: [PayLaterAccount]

  """Get all the pay later transaction from their payLaterAccountId"""
  getAllPayLaterTransaction(
    """Fill this with pay later account id"""
    payLaterAccountId: String!
  ): [PayLaterTransaction]

  """
  This API is to get every user's data in our database. Useful for checking if username is already taken or not.
  """
  getAllUser: [User]!

  """Get the latest debit transaction"""
  getDebitLatestTransaction(
    """The debitAccountId"""
    debitAccountId: String!
  ): DebitTransaction

  """Get Detail Budgeting by Id"""
  getDetailBudgeting(
    """Fill this with Budgeting id"""
    budgetId: String!
  ): Budgeting!

  """Get Detail CategoryPlan by Id"""
  getDetailCategoryPlan(
    """Fill this with CategoryPlan id"""
    categoryPlanId: String!
  ): CategoryPlan!

  """Get the latest e-wallet transaction"""
  getEWalletLatestTransaction(
    """The eWalletAccountId"""
    eWalletAccountId: String!
  ): EWalletTransaction

  """Get info on a particular cash account"""
  getInfoCashAccount(
    """The cash account id"""
    cashAccountId: String!
  ): CashAccount

  """Get info on a particular debit account"""
  getInfoDebitAccount(
    """The debit account id"""
    debitAccountId: String!
  ): DebitAccount

  """Get info on a particular e-money account"""
  getInfoEMoneyAccount(
    """The e-money account id"""
    eMoneyAccountId: String!
  ): EMoneyAccount

  """Get info on a particular e-wallet account"""
  getInfoEWalletAccount(
    """The e-wallet account id"""
    eWalletAccountId: String!
  ): EWalletAccount

  """Get info on a particular pay later account"""
  getInfoPayLaterAccount(
    """The pay later account id"""
    payLaterAccountId: String!
  ): PayLaterAccount

  """Get OTP to user email/whatsapp. WhatsApp needs to have "+62" prefix."""
  getOtp(
    """
    Fill this with user email if you want to verify the OTP via the EMAIL OTP, otherwise fill this with "null"
    """
    email: String

    """
    Fill this with user phone number if you want to verify the OTP via the SMS OTP, otherwise fill this with "null"
    """
    whatsapp: String
  ): ResponseMessage

  """Get the latest pay later transaction"""
  getPayLaterLatestTransaction(
    """The payLaterAccountId"""
    payLaterAccountId: String!
  ): PayLaterTransaction

  """Get User's profile from their userId or username"""
  getProfile(
    """
    Fill this with their id, otherwise fill this with "null"
    """
    userId: String

    """
    Fill this with username, otherwise fill this with "null"
    """
    username: String
  ): Profile

  """Get the User's frequent refresh behaviour"""
  getRefresh(
    """
    Fill this with their id, otherwise fill this with "null"
    """
    userId: String

    """
    Fill this with username, otherwise fill this with "null"
    """
    username: String
  ): [Refresh]

  """Get User's info from their Username"""
  getUser(
    """Fill this with username"""
    username: String!
  ): User
  login(password: String!, username: String!): AuthPayLoad!

  """Send OTP Gopay for connecting via Brick"""
  sendOtpGopayViaBrick(
    """Nomor hp gopay"""
    nomorHp: String!
  ): OTPData

  """
  Get JWT Token from email/whatsapp OTP that has been requested from the client. We then verified the OTP in this server. WhatsApp needs to have "+62" prefix.
  """
  verifyOtp(
    """
    Fill this with user email if you want to verify the OTP via the EMAIL OTP, otherwise fill this with "null"
    """
    email: String
    otp: String!

    """
    Fill this with user phone number if you want to verify the OTP via the SMS OTP, otherwise fill this with "null"
    """
    whatsapp: String
  ): AuthPayLoad!

  """Get JWT Token from user's PIN."""
  verifyPin(pin: String!, username: String!): AuthPayLoad!
}

type Refresh {
  date: DateTime!
  id: String!
  user: User!
  userId: String!
}

type ResponseMessage {
  """Response message"""
  response: String
}

type Subscription {
  """Subscription for cash transaction"""
  cashTransactionLive(
    """The cashAccountId associated with that cash account"""
    cashAccountId: String!
  ): CashTransactionSubscriptionType

  """Subscription for debit transaction"""
  debitTransactionLive(
    """The debitAccountId associated with that debit account"""
    debitAccountId: String!
  ): DebitTransactionSubscriptionType

  """Subscription for e-money transaction"""
  eMoneyTransactionLive(
    """The eMoneyAccountId associated with that e-money account"""
    eMoneyAccountId: String!
  ): EMoneyTransactionSubscriptionType

  """Subscription for e-wallet transaction"""
  eWalletTransactionLive(
    """The eWalletAccountId associated with that e-wallet account"""
    eWalletAccountId: String!
  ): EWalletTransactionSubscriptionType

  """Subscription for new merchant"""
  newMerchantLive: Merchant

  """Subscription for pay later transaction"""
  payLaterTransactionLive(
    """The payLaterAccountId associated with that pay later account"""
    payLaterAccountId: String!
  ): PayLaterTransactionSubscriptionType

  """Subscription for cash account"""
  updatedCashAccountLive(
    """The cashAccountId associated with that cash account"""
    cashAccountId: String!
  ): CashAccount

  """Subscription for debit account"""
  updatedDebitAccountLive(
    """The debitAccountId associated with that debit account"""
    debitAccountId: String!
  ): DebitAccount

  """Subscription for e-money account"""
  updatedEMoneyAccountLive(
    """The eMoneyAccountId associated with that e-money account"""
    eMoneyAccountId: String!
  ): EMoneyAccount

  """Subscription for e-wallet account"""
  updatedEWalletAccountLive(
    """The eWalletAccountId associated with that e-wallet account"""
    eWalletAccountId: String!
  ): EWalletAccount

  """Subscription for pay later account"""
  updatedPayLaterAccountLive(
    """The payLaterAccountId associated with that pay later account"""
    payLaterAccountId: String!
  ): PayLaterAccount
}

enum TransactionMethodEnum {
  Debit
  QRIS
  VirtualAccount
  mPayment
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!

  """id generated automatically by MongoDB"""
  id: String!

  """This is the kudos No."""
  kudosNo: Int!
  lastName: String!
  username: String!
  whatsapp: String!
}

enum typeOfAccount {
  CASH
  DEBIT
  EMONEY
  EWALLET
  PAYLATER
}

enum typeOfMutationType {
  ADD
  DELETE
  EDIT
}